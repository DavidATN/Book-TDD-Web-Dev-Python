[[chapter_16_javascript]]
== A Gentle Excursion Into JavaScript

[quote, Geoffrey Willans]
______________________________________________________________
You can never understand one language until you understand at least two.
______________________________________________________________


.ðŸš§ Warning, Chapter update in progress
*******************************************************************************
This chapter is currently in the process of being rewritten for the 3e.

It's very rough at the moment!

*******************************************************************************

Our new validation logic is good,
but wouldn't it be nice if the duplicate item error messages disappeared
once the user started fixing the problem?
Just like our nice HTML5 validation errors do?
For that we'd need a teeny-tiny bit of JavaScript.

Python is a delightful language to program in.
JavaScript wasn't always that.
But many of the rough edges have been smoothed off,
and I think it's fair to say that it's actually quite nice now.
And in the world of web development, it's unavoidable.
So let's dip our toes in, and see if we can't have a bit of fun.

NOTE: ((("JavaScript testing", "additional resources")))I'm
  going to assume you know the basics of JavaScript syntax.
  https://amzn.to/3UXVUKd[JavaScript: The Good Parts] was the best guide,
  once upon a time.  Nowadays many of the "bad parts" it warns again
  have actually been fixed, so it's a little out of date.
  Try it, but if you find it anachronistic, I've heard good things about
  https://eloquentjavascript.net[Eloquent JavaScript].



=== Starting with an FT

((("JavaScript testing", "functional test")))
((("functional tests (FTs)", "JavaScript", id="FTjava16")))
Let's add a new functional test to the `ItemValidationTest` class:

[role="sourcecode"]
.src/functional_tests/test_list_item_validation.py (ch16l001)
====
[source,python]
----
def test_error_messages_are_cleared_on_input(self):
    # Edith starts a list and causes a validation error:
    self.browser.get(self.live_server_url)
    self.get_item_input_box().send_keys("Banter too thick")
    self.get_item_input_box().send_keys(Keys.ENTER)
    self.wait_for_row_in_list_table("1: Banter too thick")
    self.get_item_input_box().send_keys("Banter too thick")
    self.get_item_input_box().send_keys(Keys.ENTER)
    self.wait_for(  # <1>
        lambda: self.assertTrue(  # <1>
            self.browser.find_element(
                By.CSS_SELECTOR, ".invalid-feedback"
            ).is_displayed()  # <2>
        )
    )

    # She starts typing in the input box to clear the error
    self.get_item_input_box().send_keys("a")

    # She is pleased to see that the error message disappears
    self.wait_for(
        lambda: self.assertFalse(
            self.browser.find_element(
                By.CSS_SELECTOR, ".invalid-feedback"
            ).is_displayed()  # <2>
        )
    )
----
====

<1> We use another of our `wait_for` invocations, this time with `assertTrue`.

<2> `is_displayed()` tells you whether an element is visible or not.
    We can't just rely on checking whether the element is _present_ in the DOM,
    because we're now going to mark elements as hidden,
    rather than removing them from the DOM altogether.


That fails appropriately:

[subs="specialcharacters,quotes"]
----
FAIL: test_error_messages_are_cleared_on_input
(functional_tests.test_list_item_validation.ItemValidationTest.test_error_messages_are_cleared_on_input)
  File ".../src/functional_tests/test_list_item_validation.py", line 89, in
  <lambda>
    lambda: self.assertFalse(
            ^^^^^^^^^^^^^^^^^
AssertionError: True is not false
----

But, before we move on:  three strikes and refactor!
We've got several places where we find the error element using CSS. Let's
move it to a helper function:

[role="sourcecode"]
.functional_tests/test_list_item_validation.py (ch16l002)
====
[source,python]
----
class ItemValidationTest(FunctionalTest):

    def get_error_element(self):
        return self.browser.find_element_by_css_selector('.has-error')

    [...]
----
====

TIP: I like to keep helper functions in the FT class that's using them, and
    only promote them to the base class when they're actually needed elsewhere.
    It stops the base class from getting too cluttered. YAGNI.

And we then make three replacements in 'test_list_item_validation', like this:

[role="sourcecode"]
.functional_tests/test_list_item_validation.py (ch16l003)
====
[source,python]
----
    self.wait_for(
        lambda: self.assertEqual(
            self.get_error_element().text,
            "You've already got this in your list",
        )
    )
[...]
    self.wait_for(
        lambda: self.assertTrue(self.get_error_element().is_displayed()),
    )
[...]
    self.wait_for(
        lambda: self.assertFalse(self.get_error_element().is_displayed()),
    )
----
====

We still have our expected failure:

[subs="specialcharacters,macros"]
----
$ pass:quotes[*python manage.py test functional_tests.test_list_item_validation*]
[...]
    self.get_error_element().is_displayed()
AssertionError: True is not false
----

And we can commit this as the first cut of our FT.


=== Setting Up a Basic JavaScript Test Runner


((("test running libraries")))
((("JavaScript testing", "test running libraries", id="JStestrunner16")))
((("pytest")))
Choosing your testing tools in the Python is fairly straightforward.
The standard library `unittest` package is perfectly adequate,
and the Django test runner also makes a good default choice.
More and more though, people will choose http://pytest.org/[pytest]
for its `assert` based assertions, and its fixture management.
We don't need to get into the pros and cons now!
The point is that there's a "good enough" default,
and there's one main popular alternative.

The JavaScript world has more of a proliferation!
Mocha, Karma, Jester, Chai, Ava, and Tape are just a few of the options
I came across when researching the Third Edition.

I chose Jasmine, because it's still popular despite being around for nearly a decade,
and because it offers a "standalone" test runner that you can use
without needing to dive into the whole Node/NPM ecosystem.
((("Jasmine")))


Let's download the so-called "standalone" version of Jasmine,
which will let us run tests in a normal browser:

[role="small-code"]
[subs="specialcharacters,quotes"]
----
$ *wget -O jasmine.zip \
  https://github.com/jasmine/jasmine/releases/download/v4.6.1/jasmine-standalone-4.6.1.zip*
$ *unzip jasmine.zip -d src/lists/static/tests*
$ *rm jasmine.zip*
# if you're on windows you may not have wget or unzip,
# but i'm sure you can manage to manually download and unzip the jasmine release

# delete some of the example files we don't need
$ *rm -r src/lists/static/tests/src*
$ *rm src/lists/static/tests/spec/SpecHelper.js*

# move the example tests "Spec" file to a more central location
$ *mv src/lists/static/tests/spec/PlayerSpec.js src/lists/static/tests/Spec.js*
$ *rmdir src/lists/static/tests/spec/"
----
//004, 005

That leaves us with a directory structure like this:

[role="dofirst-ch14l004"]
[subs="specialcharacters,quotes"]
----
$ *tree src/lists/static/tests/*
src/lists/static/tests
â”œâ”€â”€ MIT.LICENSE
â”œâ”€â”€ Spec.js
â”œâ”€â”€ SpecRunner.html
â””â”€â”€ lib
    â””â”€â”€ jasmine-4.6.1
        â”œâ”€â”€ boot0.js
        â”œâ”€â”€ boot1.js
        â”œâ”€â”€ jasmine-html.js
        â”œâ”€â”€ jasmine.css
        â”œâ”€â”€ jasmine.js
        â””â”€â”€ jasmine_favicon.png
----

We need to go edit the _SpecRunner.html_ file to take into account the things we've moved around:


[role="sourcecode"]
.lists/static/tests/tests.html (ch16l006)
[source,diff]
----
@@ -14,12 +14,10 @@
   <script src="lib/jasmine-4.6.1/boot1.js"></script>

   <!-- include source files here... -->
-  <script src="src/Player.js"></script>
-  <script src="src/Song.js"></script>
+  <script src="../superlists.js"></script>

   <!-- include spec files here... -->
-  <script src="spec/SpecHelper.js"></script>
-  <script src="spec/PlayerSpec.js"></script>
+  <script src="Spec.js"></script>

 </head>
----

We change the "source files" to point at a (for-now imaginary) _superlists.js_ file
that we'll put into the _static_ folder,
and we change the "spec files" to point at a single _Spec.js_ file,
in the _static/tests_ folder.

Now let's open up the _Spec.js_ file,
and strip it down to a single minimal smoke test:




[role="sourcecode"]
.src/lists/static/tests/Spec.js (ch16l007)
====
[source,python]
----
describe("Superlists tests", () => {  //<1><2>

  it("smoke test", () => {  //<3>
    expect(1 + 1).toEqual(2);  //<4>
  });

});
----
====


<1> The `describe` block is a way of grouping tests together,
    a bit like we use classes in our Python tests.

<2> If your javascript is a little rusty,
    you may not have seen this "arrow function" syntax, `() => {...}`.
    It's basically the new way of writing anonymous functions.
    I think they're cute!

<3> The `it` block is a single test, a bit like a method in a Python test class.
    Similarly to the `describe` block, we have a name, and then an arrow function
    to capture the body of the test

<4> Now we have our assertion.  This is a little different from assertions
    in unittest, it's using what's sometimes called "expect" syntax,
    often also seen in the Ruby world.
    We wrap our "actual" value in the `expect()` function,
    and then our assertions are methods on the expect object,
    where `.toEqual` is the equivalent of `assertEqual` in Python.


Let's see how that looks in our browser (<<jasmine-specrunner-green>>):

[[jasmine-specrunner-green]]
.The Jasmine Spec runner in action
image::images/jasmine-in-browser-green.png["Jasmine browser-based spec runner showing one passing test."]


Let's try adding a deliberate failure to see what that looks like:


[role="sourcecode"]
.src/lists/static/tests/Spec.js (ch16l008)
====
[source,python]
----
  it("smoke test", () => {
    expect(1 + 1).toEqual(3);
  });
----
====

Now if we refresh our browser, we'll see red (<<jasmine-specrunner-red>>):

[[jasmine-specrunner-red]]
.Our Jasmine tests are now red
image::images/jasmine-in-browser-red.png["Jasmine browser-based spec runner showing one failing test, with lots of red."]


.Is the Jasmine Standalone Browser Test Runner Unconventional?
*******************************************************************************
In all honesty, I'm not sure, the JavaScript world moves so fast that
even if I was sure when I wrote it, I'd be wrong by the time you read this.

What I do know is that, along with moving very fast, JavaScript things can
very quickly become very complicated.
A lot of people are working with frameworks these days (React is the main one), 
and along with that comes TypeScript, transpilers, to say nothing of Node.js,
`npm`, the `node_modules` folder, and a very steep learning curve.

In this chapter my aim is to stick with the basics.
The standalone / browser-based test runner lets us write tests without
needing to install node or anything else,
and it lets us tests interactions with the DOM.

That's enough to give us a basic environment in which to do TDD in JavaScript.

If you decide to go further in the world of frontend,
you probably will eventutally get into the complexity of frameworks and transpilers,
but the basics we work with here will still be a good foundation.

If you want to take a small step further,
look into installing the `jasmine-browser-runner` npm package,
and a bit of fiddling with its config file should let you run our tests
from the command-line instead of with a browser.
*******************************************************************************


((("", startref="JStestrunner16")))
((("", startref="qunit16")))

=== Testing with some DOM content

What do we want to test?
We want some JavaScript that will hide the `.invalid-feedback` error div,
when the user starts typing into the input box.

In other words, our code is going to interact with the `input` element
on the page, and the `div.invalid-feedback`.

Let's see how to set up some copies of these elements in our JS test environment,
for our tests and our code to interact with.


[role="sourcecode dofirstch16l009"]
.lists/static/tests/Spec.js (ch16l010)
====
[source,javascript]
----
describe("Superlists tests", () => {
  let testDiv;  //<3>

  beforeEach(() => {  //<1>
    testDiv = document.createElement("div");
    testDiv.innerHTML = `  <2>
      <form>
        <input
          id="id_text"
          name="text"
          class="form-control form-control-lg is-invalid
          placeholder="Enter a to-do item"
          value="Value as submitted"
          required
        />
        <div class="invalid-feedback">An error message</div>
      </form>
    `
    document.body.appendChild(testDiv)
  });

  afterEach(() => {  //<1>
    testDiv.remove();
  });
});
----
====

<1> The `beforeEach` and `afterEach` functions are Jasmine's equivalent of `setUp` and `tearDown`.

<2> We create a new div element, and populate it with some HTML that matches
  the elements we care about from our Django template.
  Notice the use of backticks (+`+) to allow us to write multi-line strings.
  Depending on your text editor, it may even nicely syntax-highlight the HTML for you.

<3> A little quirk of JavaScript here,
  because we want the same `testDiv` variable to be available inside both the
  `beforeEach` and `afterEach` functions, we declare the variable with this `let`
  in the containing scope outside of both of them.

In theory, we could just add the HTML to the `SpecRunner.html` file,
but by using `beforeEach` and `afterEach`,
I'm making sure that each test gets a completely fresh copy of the html elements involved,
so that one test can't affect another.


Let's now have a play with our testing framework,
to see if we find DOM elements and make assertions on whether they are visible.
We'll also try manually hiding an element, from the tests,
just as an experiment, before we write any of our "real" JS code.

[role="sourcecode"]
.lists/static/tests/Spec.js (ch16l011)
====
[source,python]
----
  it("smoke test for checking visibility", () => {
    const errorDiv = document.querySelector("div.invalid-feedback");  //<1>
    expect(errorDiv.checkVisibility()).toBe(true, "error div should be visible on load");  //<2>
    errorDiv.style.display = "none";  //<3>
    expect(errorDiv.checkVisibility()).toBe(false, "js hiding should work");  //<4>
  });
----
====

<1> We retrieve our error div with `document.querySelector`,
  which is probably the easiest way to find a particular piece of the DOM,
  in modern plain-old JavaScript (does anyone still remember jQuery?).

<2> Another fairly new API in JavaScript-Land is `checkVisibility()`.
  Notice we're also adding a second argument in the `.toBe()` clause,
  which is the message that will be printed if the test fails.

<3> We manually hide the element in the test,
  by setting its `style.display` to "none".

<4> And we check it worked, with `checkVisibility()` again.



If you refresh the browser, you should see that all passes:

.Expected results from Jasmine in the browser
====
[role="qunit-output"]
----
1 spec, 0 failures, randomized with seed 12345		finished in 0.009s

Superlists tests
  * smoke test for checking visibility
----
====


// old content had a deliberate mistake where we started out without fixtures,
// decided not to bother with that.  could revisit.



=== Building a JavaScript Unit Test for Our Desired Functionality


((("JavaScript testing", "unit test")))
((("unit tests", "JavaScript")))
Now that we're acquainted with our JavaScript testing tools,
we can switch back to just one test and start to write the real thing:

[role="sourcecode small-code"]
.lists/static/tests/Spec.js (ch16l012)
====
[source,html]
----
  it("error message should be hidden on input", () => {  //<1>
    const textInput = document.querySelector("input#id_text");  //<2>
    const errorDiv = document.querySelector("div.invalid-feedback");
    expect(errorDiv.checkVisibility()).toBe(true, "error div should be visible on load"); //<3>

    initialize(textInput, errorDiv);  //<4>

    expect(errorDiv.checkVisibility()).toBe(true, "error div should not be hidden by initialize()");  //<5>

    textInput.dispatchEvent(new InputEvent("input"));  //<6>
    expect(errorDiv.checkVisibility()).toBe(false, "error div should be hidden on input"); //<7>
  });
----
====

<1> Let's change our test name to a description of what we want to happen;
  our objective is that, when the user starts typing into the input box,
  we should hide the error message.

<2> We retrieve the `<input>` element from the DOM,
  in a similar way to how we found the error message div.

<3> We leave our old assertion in-place,
  just to sense-check that our fixtures start out with the error visible,
  like the real page will when we render an error for the user.

<4> Here's where we start "programming by wishful thinking".
  Let's imagine we have an `initialize()` function to set up our auto-hiding behaviour.
  We pass in the input element to watch for input events,
  and the error div that we want to hide.

<5> Let's sense-check once again that our `initialize()` function doesn't
    just cheekily hide the error div immediately.

<6> Here's how we simulate a user typing into the input box.

<7> And here's our real assertion: the error div should be hidden after
  the input box sees an input event.


And that gives us a fairly silly error,
because we haven't got an `initialize()` function yet:


[role="qunit-output"]
----
1 spec, 1 failure, randomized with seed 12345		finished in 0.009s
Spec List | Failures

Superlists tests > error message should be hidden on input
ReferenceError: initialize is not defined in file:////Users/harry.percival/workspace/Book-TDD-Web-Dev-Python/source/chapter_16_javascript/superlists/src/lists/static/tests/Spec.js (line 32)
@file:////Users/harry.percival/workspace/Book-TDD-Web-Dev-Python/source/chapter_16_javascript/superlists/src/lists/static/tests/Spec.js:32:5
<Jasmine>
----


For now, let's just define it inline in our tests file, _Spec.js_:

[role="sourcecode small-code"]
.lists/static/tests/Spec.js (ch16l013)
====
[source,html]
----
describe("Superlists tests", () => {
  let testDiv;

  const initialize = () => {
  }

  beforeEach(() => {
    testDiv = document.createElement("div");
  [...]
----
====

// TODO: semicolon on nitializer def

Now we get our expected failure:


[role="qunit-output"]
----
1 spec, 1 failure, randomized with seed 12345		finished in 0.01s
Spec List | Failures

Superlists tests > error message should be hidden on input
Expected true to be false, 'error div should be hidden on input'.
<Jasmine>
@file:////Users/harry.percival/workspace/Book-TDD-Web-Dev-Python/source/chapter_16_javascript/superlists/src/lists/static/tests/Spec.js:40:40
<Jasmine>
----

You might have been expecting a failure to do with the fact that `initialize()`
was defined as taking no arguments, but we passed two?
But JavaScript is too chill for that.
You can call a function with too many or too few arguments,
and JS will just _deal with it_.


Let's write `initialize()` deliberately wrong then.
Since it's our first time doing TDD with JavaScript,
we can afford to really go step by step:

[role="sourcecode"]
.lists/static/tests/Spec.js (ch16l014)
====
[source,python]
----
  const initialize = (textInput, errorDiv) => {
    errorDiv.style.display = "none";
  }
----
====

That gives us the right failure, our sense-check guards are working:

[role="qunit-output"]
----
Superlists tests > error message should be hidden on input
Expected false to be true, 'error div should not be hidden by initialize()'.
<Jasmine>
@file:////Users/harry.percival/workspace/Book-TDD-Web-Dev-Python/source/chapter_16_javascript/superlists/src/lists/static/tests/Spec.js:38:40
<Jasmine>
----

And here's a first cut of a working hide-errors-on-input function:

[role="sourcecode"]
.lists/static/tests/Spec.js (ch16l015)
====
[source,python]
----
  const initialize = (textInput, errorDiv) => {
    textInput.oninput = () => {
      errorDiv.style.display = "none";
    }
  };
----
====


That gets our test passing:


[role="qunit-output"]
----
1 spec, 0 failures, randomized with seed 12345		finished in 0.008s

Superlists tests
  * error message should be hidden on input
----

todo: resume here

Let's say we want to keep our code in a standalone JavaScript file called
'list.js'.


[role="sourcecode"]
.lists/static/tests/tests.html
====
[source,html]
----
  <script src="../jquery-3.3.1.min.js"></script>
  <script src="../list.js"></script>
  <script src="qunit-2.6.0.js"></script>

  <script>
    [...]
----
====

Here's the minimal code to get that test to pass:

[role="sourcecode"]
.lists/static/list.js
====
[source,javascript]
----
$('.has-error').hide();
----
====

And it works...

[role="qunit-output"]
----
1 assertions of 1 passed, 0 failed.
1. errors should be hidden on keypress (1)
----

But it has an obvious problem. We'd better add another test:

[role="sourcecode"]
.lists/static/tests/tests.html
====
[source,javascript]
----
QUnit.test("errors should be hidden on keypress", function (assert) {
  $('input[name="text"]').trigger('keypress');
  assert.equal($('.has-error').is(':visible'), false);
});

QUnit.test("errors aren't hidden if there is no keypress", function (assert) {
  assert.equal($('.has-error').is(':visible'), true);
});
----
====

Now we get an expected failure:

[role="qunit-output"]
----
1 assertions of 2 passed, 1 failed.
1. errors should be hidden on keypress (1)
2. errors aren't hidden if there is no keypress (1, 0, 1)
    1. failed
        Expected: true
        Result: false
[...]
----

And we can make a more realistic implementation:

[role="sourcecode"]
.lists/static/list.js
====
[source,javascript]
----
$('input[name="text"]').on('keypress', function () { //<1>
  $('.has-error').hide();
});
----
====

<1> This line says: find any input elements whose name attribute is "text", and
    add an event listener which reacts 'on' keypress events.  The event
    listener is the inline function, which hides all elements that have the
    class `.has-error`.


Does it work?  No.


[role="qunit-output"]
----
1 assertions of 2 passed, 1 failed.
1. errors should be hidden on keypress (1, 0, 1)
    1. failed
        Expected: false
        Result: true
[...]
2. errors aren't hidden if there is no keypress (1)
----

Curses!  Why is that?

Fixtures, Execution Order, and Global State: Key Challenges of JS Testing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

((("JavaScript testing", "managing global state")))((("global state")))((("JavaScript testing", "key challenges of", id="JSTkey16")))((("fixtures div")))One
of the difficulties with JavaScript in general, and testing in particular,
is in understanding the order of execution of our code (i.e., what happens when).
When does our code in 'list.js' run, and when does each of our tests run?  And
how does that interact with global state, that is, the DOM of our web page, and the
fixtures that we've already seen are supposed to be cleaned up after each test?


console.log for Debug Printing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

((("console.log")))Let's
add a couple of debug prints, or "console.logs":

[role="sourcecode"]
.lists/static/tests/tests.html
====
[source,html]
----
  <script>

console.log('qunit tests start');

QUnit.test("errors should be hidden on keypress", function (assert) {
  console.log('in test 1');
  $('input[name="text"]').trigger('keypress');
  assert.equal($('.has-error').is(':visible'), false);
});

QUnit.test("errors aren't hidden if there is no keypress", function (assert) {
  console.log('in test 2');
  assert.equal($('.has-error').is(':visible'), true);
});
  </script>
----
====

And the same in our actual JS code:


[role="sourcecode"]
.lists/static/list.js (ch14l015)
====
[source,javascript]
----
$('input[name="text"]').on('keypress', function () {
  console.log('in keypress handler');
  $('.has-error').hide();
});
console.log('list.js loaded');
----
====


Rerun the tests, opening up the browser debug console (Ctrl-Shift-I usually)
and you should see something like <<qunit-with-js-console>>.

[[qunit-with-js-console]]
.QUnit tests with console.log debug outputs
image::images/twp2_1603.png["QUnit tests with console.log debug outputs"]

What do we see?

* 'list.js' loads first.  So our event listener should be attached to the
  input element.
* Then our QUnit tests file loads.
* Then each test runs.

But, thinking it through, each test is going to "reset" the fixtures div, which
means destroying and re-creating the input element.  So the input element that
'list.js' sees and attaches the event listener to will be replaced with a new
one by the time each test runs.



Using an Initialize Function for More Control Over Execution Time
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We need more control over the order of execution of our JavaScript.  Rather
than just relying on the code in 'list.js' running whenever it is loaded by
a `<script>` tag, we can use a common pattern, which is to define an
"initialize" function, and call that when we want to in our tests (and
later in real life):


[role="sourcecode"]
.lists/static/list.js
====
[source,javascript]
----
var initialize = function () {
  console.log('initialize called');
  $('input[name="text"]').on('keypress', function () {
    console.log('in keypress handler');
    $('.has-error').hide();
  });
};
console.log('list.js loaded');
----
====

And in our tests file, we call `initialize` with each test:


[role="sourcecode"]
.lists/static/tests/tests.html (ch14l017)
====
[source,javascript]
----
QUnit.test("errors should be hidden on keypress", function (assert) {
  console.log('in test 1');
  initialize();
  $('input[name="text"]').trigger('keypress');
  assert.equal($('.has-error').is(':visible'), false);
});

QUnit.test("errors aren't hidden if there is no keypress", function (assert) {
  console.log('in test 2');
  initialize();
  assert.equal($('.has-error').is(':visible'), true);
});

----
====

Now we should see our tests pass, and our debug output should make
more sense:

[role="qunit-output"]
----
2 assertions of 2 passed, 0 failed.
1. errors should be hidden on keypress (1)
2. errors aren't hidden if there is no keypress (1)

list.js loaded
qunit tests start
in test 1
initialize called
in keypress handler
in test 2
initialize called
----

Hooray!  Let's strip out those console.logs:

[role="sourcecode"]
.lists/static/list.js
====
[source,javascript]
----
var initialize = function () {
  $('input[name="text"]').on('keypress', function () {
    $('.has-error').hide();
  });
};
----
====

And from the tests too...

[role="sourcecode"]
.lists/static/tests/tests.html
====
[source,javascript]
----
QUnit.test("errors should be hidden on keypress", function (assert) {
  initialize();
  $('input[name="text"]').trigger('keypress');
  assert.equal($('.has-error').is(':visible'), false);
});

QUnit.test("errors aren't hidden if there is no keypress", function (assert) {
  initialize();
  assert.equal($('.has-error').is(':visible'), true);
});
----
====


And for the moment of truth, we'll pull in jQuery, our script, and
invoke our initialize function on our real pages:


[role="sourcecode"]
.lists/templates/base.html (ch14l020)
====
[source,html]
----
    </div>
    <script src="/static/jquery-3.3.1.min.js"></script>
    <script src="/static/list.js"></script>

    <script>
      initialize();
    </script>

  </body>
</html>
----
====

NOTE: It's good practice to put your script loads at the end of your body HTML,
    as it means the user doesn't have to wait for all your JavaScript to load
    before they can see something on the page.  It also helps to make sure most
    of the DOM has loaded before any scripts run.

Aaaand we run our FT:

[subs="specialcharacters,quotes"]
----
$ *python manage.py test functional_tests.test_list_item_validation.\
ItemValidationTest.test_error_messages_are_cleared_on_input*
[...]

Ran 1 test in 3.023s

OK
----

((("", startref="JSTkey16")))Hooray!  That's a commit!


[subs="specialcharacters,quotes"]
----
$ *git add lists/static*
$ *git commit -m"add jquery, qunit tests, list.js with keypress listeners"*
----



Columbo Says: Onload Boilerplate and Namespacing
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


'Oh, and one more thing'.  ((("JavaScript testing", "boilerplate and namespacing")))Our
`initialize` function name is too generic--what
if we include some third-party JavaScript tool later that also defines a
function called `initialize`? Let's give ourselves a "namespace" that's
unlikely to be used by anyone else:


[role="sourcecode"]
.lists/static/list.js
====
[source,javascript]
----
window.Superlists = {}; //<1>
window.Superlists.initialize = function () { //<2>
  $('input[name="text"]').on('keypress', function () {
    $('.has-error').hide();
  });
};
----
====

<1> We explicitly declare an object as a property of the "window" global,
    giving it a name that we think no one else is likely to use.

<2> Then we make our `initialize` function an attribute of that namespace
    object.

TIP: There are lots of other, much cleverer ways of dealing with namespaces in
    JavaScript, but they are all more complicated, and I'm not enough of an
    expert to be able to steer you around them.  If you do want to learn
    more, search for 'require.js', which seemed to be the done thing, or at
    least it was in the last JavaScript femtosecond.


[role="sourcecode"]
.lists/static/tests/tests.html
====
[source,html]
----
  <script>
QUnit.test("errors should be hidden on keypress", function (assert) {
  window.Superlists.initialize();
  $('input[name="text"]').trigger('keypress');
  assert.equal($('.has-error').is(':visible'), false);
});

QUnit.test("errors aren't hidden if there is no keypress", function (assert) {
  window.Superlists.initialize();
  assert.equal($('.has-error').is(':visible'), true);
});
  </script>
----
====



Finally, whenever you have some JavaScript that interacts with the DOM, it's
always good to wrap it in some "onload" boilerplate code to make sure that the
page has fully loaded before it tries to do anything. Currently it works
anyway, because we've placed the `<script>` tag right at the bottom of the
page, but we shouldn't rely on that.


The jQuery `onload` boilerplate is quite minimal:

[role="sourcecode"]
.lists/templates/base.html
====
[source,javascript]
----
    <script>

$(document).ready(function () {
  window.Superlists.initialize();
});

    </script>
----
====

Read more in the http://api.jquery.com/ready/[jQuery `.ready()` docs].


JavaScript Testing in the TDD Cycle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



((("JavaScript testing", "in the TDD cycle", secondary-sortas="TDD cycle")))((("Test-Driven Development (TDD)", "JavaScipt testing in")))You
may be wondering how these JavaScript tests fit in with our "double loop"
TDD cycle.  The answer is that they play exactly the same role as our
Python unit tests.

1. Write an FT and see it fail.
2. Figure out what kind of code you need next: Python or JavaScript?
3. Write a unit test in either language, and see it fail.
4. Write some code in either language, and make the test pass.
5. Rinse and repeat.



NOTE: Want a little more practice with JavaScript?  See if you can get our
    error messages to be hidden when the user clicks inside the input element,
    as well as just when they type in it.  You should be able to FT it too.


We're almost ready to move on to <<part3>>.  The last step is to deploy our
new code to our servers. Don't forget to do a final commit including
'base.html' first!


A Few Things That Didn't Make It
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

((("JavaScript testing", "additional considerations for")))In
this chapter I wanted to cover the very basics of JavaScript testing and how
it fits into our TDD workflow in this chapter.  Here are a few pointers for
further research:

* At the moment, our test only checks that the JavaScript works on one page.
  It works because we're including it in 'base.html', but if we'd only
  added it to 'home.html' the tests would still pass.  It's a judgement
  call, but you could choose to write an extra test here.

* ((("JavaScript testing", "syntax errors")))When
writing JavaScript, get as much help from your editor as you can to
  avoid common "gotchas".  Check out syntax/error-checking tools like
  "jslint" and "jshint", also known as "linters".


* ((("QUnit")))QUnit
mainly expects you to "run" your tests using an actual web browser.
  This has the advantage that it's easy to create some HTML fixtures that
  match the kind of HTML your site actually contains, for tests to run against.
  But it's also possible to run JS tests from the command line.  We'll see
  an example in <<chapter_CI>>.

* ((("MVC frameworks")))((("angular.js")))((("React")))The
new shiny thing in the world of frontend development are MVC frameworks
  like 'angular.js' and React.  ((("Jasmine")))Most
tutorials for these use an RSpec-like
  assertion library called https://jasmine.github.io/[Jasmine].  If you're
  going to use one of them, you'll probably find life easier if you use Jasmine
  rather than QUnit.






There is more JavaScript fun in this book too!  Have a look at the
<<appendix_rest_api,Rest API appendix>> when you're ready for it.((("", startref="FTjava16")))


[role="less_space pagebreak-before"]
.JavaScript Testing Notes
*******************************************************************************

* ((("Selenium", "and JavaScript", secondary-sortas="JavaScript")))One
of the great advantages of Selenium is that it allows you to test that
  your JavaScript really works, just as it tests your Python code.

* ((("JavaScript testing", "test running libraries")))There
are many JavaScript test running libraries out there.  QUnit is closely
  tied to jQuery, which is the main reason I chose it.

* ((("JavaScript testing", "managing global state")))((("global state")))No
matter which testing library you use, you'll always need to find solutions
  to the main challenge of JavaScript testing, which is about 'managing global
  state'.  That includes:
    - the DOM / HTML fixtures
    - namespacing
    - understanding and controlling execution order.

* I don't really mean it when I say that JavaScript is awful. It can actually
  be quite fun.  But I'll say it again: make sure you've read
  <<jsgoodparts,'JavaScript: The Good Parts'>>.

*******************************************************************************

//IDEA: take the opportunity to use {% static %} tag in templates?


