[[chapter_11_ansible]]
== Infrastructure As Code with Ansbile


[quote, 'Cay Horstman']
______________________________________________________________
Automate, automate, automate.
______________________________________________________________

((("deployment", "automating with Fabric", id="Dfarbric11")))
((("infrastructure as code")))
Automating deployment is critical for our staging tests to mean anything.
By making sure the deployment procedure is repeatable, we give ourselves
assurances that everything will go well when we deploy to production. (These
days people sometimes use the words "infrastructure as code" to describe
automation of deployments, and provisioning.)


NOTE: Why not ping me a note once your site is live on the web,
    and send me the URL?
    It always gives me a warm and fuzzy feeling...
    obeythetestinggoat@gmail.com.

//TODO useful blog post https://linuxhandbook.com/autostart-podman-containers/


// TODO make sure we put SECRET_KEY in somehow

.ðŸš§ Warning, this chapter is heavily under construction
*******************************************************************************
As part of my work on the third edition of the book,
I'm rewriting the deployment chapters,
but this chapter is far from ready I'm afraid.
Sorry!

Following along with this chapter is going to be pretty
much impossible while I'm still half-done.

It might be best to skip ahead to [[chapter_12_organising_test_files]]

*******************************************************************************


=== Getting a Domain Name

((("domain names")))
We're going to need a couple of domain names at this point in the book--they
can both be subdomains of a single domain.  I'm going to use
'superlists.ottg.eu' and 'superlists-staging.ottg.eu'.
If you don't already own a domain, this is the time to register one! Again,
this is something I really want you to 'actually' do.  If you've never
registered a domain before, just pick any old registrar and buy a cheap one--it
should only cost you $5 or so, and you can even find free ones.
I promise seeing your site on a "real" website will be a thrill.



=== Manually Provisioning a Server to Host Our Site

((("staging sites", "manual server provisioning", id="SSserver09")))
((("server provisioning", id="seerver09")))
We can separate out "deployment" into two tasks:

- 'Provisioning' a new server to be able to host the code
- 'Deploying' a new version of the code to an existing server

Some people like to use a brand new server for every deployment--it's what we
do at PythonAnywhere.  That's only necessary for larger, more complex sites
though, or major changes to an existing site. For a simple site like ours, it
makes sense to separate the two tasks.  And, although we eventually want both
to be completely automated, we can probably live with a manual provisioning
system for now.

As you go through this chapter, you should be aware that provisioning is
something that varies a lot, and that as a result there are few universal
best practices for deployment.  So, rather than trying to remember the
specifics of what I'm doing here, you should be trying to understand the
rationale, so that you can apply the same kind of thinking in the
specific future circumstances you encounter.


==== Choosing Where to Host Our Site


((("hosting services")))
There are loads of different solutions out there these days,
but they broadly fall into two camps:

- Running your own (probably virtual) server
- Using a ((("Platform-As-A-Service (PaaS)")))Platform-As-A-Service (PaaS)
  offering like Heroku or my old employers, PythonAnywhere.



((("PythonAnywhere")))
Particularly for small sites, a PaaS offers a lot of advantages,
and I would definitely recommend looking into them.
We're not going to use a PaaS in this book however, for several reasons.
The main reason is that I want to avoid endorsing specific commercial providers.
Secondly, all the PaaS offerings are quite different,
and the procedures to deploy to each vary a lot--learning about one
doesn't necessarily tell you about the others.
Any one of them might radically change their process or business model by the time you get to read this book.

Instead, we'll learn just a tiny bit of good old-fashioned server admin,
including SSH and manual server config.  They're unlikely to ever go away, and
knowing a bit about them will get you some respect from all the grizzled
dinosaurs out there.



==== Spinning Up a Server

I'm not going to dictate how you do this--whether you choose Amazon AWS,
Rackspace, Digital Ocean, your own server in your own data centre or a
Raspberry Pi in a cupboard under the stairs, any solution should be fine, as
long as:

* Your server is running Ubuntu 22.04 (aka "Jammy/LTS").

* You have root access to it.

* It's on the public internet.

* You can SSH into it.

I'm recommending Ubuntu as a distro because it's popular and I'm used to it.
If you know what you're doing, you can probably get away with using
something else, but you're on your own.

((("Linux servers")))
If you've never started a Linux server before and you have absolutely no idea
where to start, I wrote a
https://github.com/hjwp/Book-TDD-Web-Dev-Python/blob/master/server-quickstart.md[very brief guide on GitHub].


NOTE: Some people get to this chapter, and are tempted to skip the domain bit,
    and the "getting a real server" bit, and just use a VM on their own PC.
    Don't do this. It's 'not' the same, and you'll have more difficulty
    following the instructions, which are complicated enough as it is.  If
    you're worried about cost, have a look at the link above for free options.
    ((("getting help")))


==== User Accounts, SSH, and Privileges

In these instructions, I'm assuming that you have a nonroot user account set
up that has "sudo" privileges, so whenever we need to do something that
requires root access, we use sudo, and I'm explicit about that in the various
instructions that follow.

My user is called "elspeth", but you can call yours whatever you like!  Just
remember to substitute it in all the places I've hardcoded it below.
See the guide linked above if you need tips on creating a sudo user.




.General Server Debugging Tips
*******************************************************************************

The most important lesson to remember from this chapter is to work
incrementally, make one change at a time, and run your tests frequently.

When things (inevitably) go wrong, resist the temptation to flail about and
make other unrelated changes in the hope that things will start working again;
instead, stop, go backward if necessary to get to a working state, and figure
out what went wrong before moving forward again.

It's just as easy to fall into the Refactoring-Cat trap on the server!

*******************************************************************************






Configuring Domains for Staging and Live
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We don't want to be messing about with IP addresses all the time, so we should
point our staging and live domains to the server. At my registrar, the control
screens looked a bit like <<registrar-control-screens>>.

[[registrar-control-screens]]
.Domain setup
image::images/twp2_0902.png["Registrar control screens for two domains"]

//TODO: adjust illustration to show "superlists" not "book-example"

((("A-Records")))In
the DNS system, pointing a domain at a specific IP address is called an
"A-Record".  All registrars are slightly different, but a bit of clicking
around should get you to the right screen in yours.  You'll need two A-records:
one for the staging address and one for the live one.  No need to worry about
any other type of record.

DNS records take some time to "propagate" around the world (it's controlled
by a setting called "TTL", Time To Live), so once you've set up your A-record,
you can check its progress on a "propagation checking" service like this one: https://www.whatsmydns.net/#A/superlists-staging.ottg.eu[].


=== A first cut of an ansible script

bla bla infrastructure as code


[role="sourcecode"]
.infra/ansible-provision.yaml (ch11l001)
====
[source,yaml]
----
---
- hosts: all

  tasks:
    - name: Install podman
      ansible.builtin.apt:
        name: podman
        update_cache: yes
      become: true

    - name: Run container
      containers.podman.podman_container:
        name: testcontainer
        image: busybox
        state: started
        cmd: echo hello world
----
====



=== SSHing Into the Server and Viewing Container Logs

Now ssh into the server, check it worked


[role="server-commands"]
[subs="specialcharacters,quotes"]
----
elspeth@server:$ *podman ps -a*
elspeth@server:$ *podman logs testcontainer*
hello, world
----

TIP: Look out for that `elspeth@server`
    in the command-line listings in this chapter.
    It indicates commands that must be run on the server,
    as opposed to commands you run on your own PC.


=== Getting our image onto the server

Typically, you can "push" and "pull" container images
to a "container registry" -- Docker offers a public one called DockerHub,
and organisations will often run private ones,
hosted by cloud providers like AWS.

So your process of getting an image onto a server is usually
* push the image from your machine to the registry
* pull the image from the registry onto the server.
  Usually this step is implicit,
    in that you just specifying the image name
    in the format registry-url/image-name:tag,
    and then `docker run` takes care of pulling down the image for you.

But I don't want to ask you to create a DockerHub account,
or implicitly endorse any particular provider,
so we're going to "simulate" this process by doing it manually.

It turns out you can "export" a container image to an archive format,
manually copy that to the server, and then re-import it.
In ansible config, it looks like this:

[role="sourcecode"]
.infra/ansible-provision.yaml (ch11l002)
====
[source,yaml]
----
---
- hosts: all

  tasks:
    - name: Install podman
      ansible.builtin.apt:
        name: podman
        update_cache: yes
      become: true

    - name: Export container image locally
      containers.podman.podman_save:
        image: superlists
        dest: /tmp/superlists-img.oci
        format: oci-archive
        force: true
      delegate_to: 127.0.0.1

    - name: Upload image to server
      ansible.builtin.copy:
        src: /tmp/superlists-img.oci
        dest: /tmp/superlists-img.oci

    - name: Import container image on server
      containers.podman.podman_load:
        input: /tmp/superlists-img.oci

    - name: Run container
      containers.podman.podman_container:
        name: superlists
        image: superlists
        state: started
        recreate: true
----
====


Let's see if that worked!


Nope.  TODO: debug, ssh into the server, show missing env vars.


=== Using an env File to Store Our Environment Variables

We don't want to save secrets like SECRET_KEY into our ansible
config either.

* explain env files.

* explain jinja2.

[role="sourcecode"]
.infra/env.j2 (ch11l003)
====
[source,python]
----
DJANGO_DEBUG_FALSE=1
DJANGO_SECRET_KEY="{{ secret_key }}"
DJANGO_ALLOWED_HOST="{{ host }}"
----
====


[role="sourcecode"]
.infra/ansible-provision.yaml (ch11l004)
====
[source,yaml]
----


    - name: Ensure .env file exists
      ansible.builtin.template:
        src: env.j2
        dest: ~/superlists.env
      vars:
        host: "{{ inventory_hostname }}"
        secret_key: "{{ lookup('password', '/dev/null length=32 chars=ascii_letters,digits') }}"
        force: false  # do not recreate file if it already exists.

----
====

* explain idempotency

* mention other secret management tools. vault??


==== More debugging

forgot ports

show ssh, curl localhosts maybe.

[role="sourcecode"]
.infra/ansible-provision.yaml (ch11l005)
====
[source,yaml]
----
    - name: Allow nonroot user to bind to port 80
      ansible.posix.sysctl:
        name: net.ipv4.ip_unprivileged_port_start
        value: 80
        reload: true
      become: true

    - name: Run container
      containers.podman.podman_container:
        name: superlists
        image: superlists
        state: started
        recreate: true
        env_file: /superlists.env
        ports: 80:8888
----


==== Using Systemd to Make Sure Our Container Starts on Boot

((("Systemd")))
((("Container", "automatic booting/reloading of")))
Our final step is to make sure
that the server starts up our container automatically on boot,
and reloads it automatically if it crashes.

Ansible and the podman plugins have some modules for this:


[role="sourcecode"]
.infra/ansible-provision.yaml (ch11l006)
====
[source,yaml]
----
    - name: Create container
      containers.podman.podman_container:
        name: superlists
        image: superlists
        state: stopped
        recreate: true
        env_file: ~/superlists.env
        ports: 80:8888

    - name: Generate Systemd config file
      containers.podman.podman_generate_systemd:
        name: superlists
        dest: ~/.config/systemd/user/
    
    - name: Container must be started and enabled on systemd
      ansible.builtin.systemd:
        name: container-superlists
        daemon_reload: true
        state: started
        enabled: true
----
====



TODO: use the auto-generated systemd thing.

Here's what a Systemd config file looks like

[role="sourcecode small-code"]
.server: /etc/systemd/system/gunicorn-superlists-staging.ottg.eu.service
====
[source,bash]
----
[Unit]
Description=Gunicorn server for superlists-staging.ottg.eu

[Service]
Restart=on-failure  <1>
User=elspeth  <2>
WorkingDirectory=/home/elspeth/sites/superlists-staging.ottg.eu  <3>
EnvironmentFile=/home/elspeth/sites/superlists-staging.ottg.eu/.env  <4>

ExecStart=/home/elspeth/sites/superlists-staging.ottg.eu/.venv/bin/gunicorn \
    --bind unix:/tmp/superlists-staging.ottg.eu.socket \
    superlists.wsgi:application  <5>

[Install]
WantedBy=multi-user.target <6>
----
====

Systemd is joyously simple to configure (especially if you've ever had the
dubious pleasure of writing an `init.d` script), and is fairly
self-explanatory.

<1> `Restart=on-failure` will restart the process automatically if it crashes.

<2> `User=elspeth` makes the process run as the "elspeth" user.

<3> `WorkingDirectory` sets the current working directory.

<4> `EnvironmentFile` points Systemd towards our _.env_ file and tells it
    to load environment variables from there.

<5> `ExecStart` is the actual process to execute.  I'm using the ++\++ line
    continuation characters to split the full command over multiple lines,
    for readability, but it could all go on one line.

<6> `WantedBy` in the `[Install]` section is what tells Systemd we want this
    service to start on boot.

Systemd scripts live in '/etc/systemd/system', and their names must end in
'.service'.

Now we tell Systemd to start Gunicorn with the `systemctl` command:

[role="server-commands"]
[subs="specialcharacters,quotes"]
----
# this command is necessary to tell Systemd to load our new config file
elspeth@server:$ *sudo systemctl daemon-reload*
# this command tells Systemd to always load our service on boot
elspeth@server:$ *sudo systemctl enable gunicorn-superlists-staging.ottg.eu*
# this command actually starts our service
elspeth@server:$ *sudo systemctl start gunicorn-superlists-staging.ottg.eu*
----

(You should find the `systemctl` command responds to tab completion, including
of the service name, by the way.)

Now we can rerun the FTs to see that everything still works. You can even test
that the site comes back up if you reboot the server!

[role="small-code"]
[subs="specialcharacters,macros"]
----
$ pass:quotes[*TEST_SERVER=superlists-staging.ottg.eu python manage.py test functional_tests*]
[...]
OK
----


.More Debugging Tips and Commands
*******************************************************************************

A few more places to look and things to try, now that we've introduced
Gunicorn and Systemd into the mix, should things not go according to plan:

- ((("debugging", "Systemd")))You can check the Systemd logs using
  `sudo journalctl -u gunicorn-superlists-staging.ottg.eu`.

- You can ask Systemd to check the validity of your service configuration:
  `systemd-analyze verify /path/to/my.service`.

- Remember to restart both services whenever you make changes.

- If you make changes to the Systemd config file, you need to
  run `daemon-reload` before `systemctl restart` to see the effect
  of your changes.

*******************************************************************************


////
TODO: old ansible content follows"

((("Ansible", id="ansible29")))((("continuous deployment tools")))((("deployment", "continuous deployment tools")))We
used Fabric to automate deploying new versions of the source code to our
servers.  But provisioning a fresh server, and updating the Nginx and Gunicorn
config files, was all left as a manual process.

This is the kind of job that's increasingly given to tools called
"Configuration Management" or "Continuous Deployment" tools.  Chef and Puppet
were the first popular ones, and in the Python world there's Salt and Ansible.

Of all of these, Ansible is the easiest to get started with.  We
can get it working with just two files:

    pip2 install --user ansible  # Python 2 sadly


An "inventory file" at _deploy_tools/inventory.ansible_ defines what servers we
can run against:

[role="sourcecode"]
.deploy_tools/inventory.ansible
====
[source,ini]
----
[live]
superlists.ottg.eu ansible_become=yes ansible_ssh_user=elspeth

[staging]
superlists-staging.ottg.eu ansible_become=yes ansible_ssh_user=elspeth

[local]
localhost ansible_ssh_user=root ansible_ssh_port=6666 ansible_host=127.0.0.1
----
====

(The local entry is just an example, in my case a Virtualbox VM, with port
forwarding for ports 22 and 80 set up.)


Installing System Packages and Nginx
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Next the Ansible "playbook", which defines what to do on the server.  This
uses a syntax called YAML:

[role="sourcecode"]
.deploy_tools/provision.ansible.yaml
====
[source,yaml]
----
---

- hosts: all

  vars:
      host: "{{ inventory_hostname }}"

  tasks:

    - name: Deadsnakes PPA to get Python 3.6
      apt_repository:
        repo='ppa:deadsnakes/ppa'
    - name: make sure required packages are installed
      apt: pkg=nginx,git,python3.7,python3.7-venv state=present

    - name: allow long hostnames in nginx
      lineinfile:
        dest=/etc/nginx/nginx.conf
        regexp='(\s+)#? ?server_names_hash_bucket_size'
        backrefs=yes
        line='\1server_names_hash_bucket_size 64;'

    - name: add nginx config to sites-available
      template: src=./nginx.conf.j2 dest=/etc/nginx/sites-available/{{ host }}
      notify:
          - restart nginx

    - name: add symlink in nginx sites-enabled
      file:
          src=/etc/nginx/sites-available/{{ host }}
          dest=/etc/nginx/sites-enabled/{{ host }}
          state=link
      notify:
          - restart nginx
----
====


The `inventory_hostname` variable is the domain name of the server we're running against.
I'm using the `vars` section to rename it to "host", just for convenience.


In this section, we install our required software using `apt`, tweak the Nginx
config to allow long hostnames using a regular expression replacer, and then write the Nginx config file using a template.  This is a modified version
of the template file we saved into 'deploy_tools/nginx.template.conf' in
<<chapter_09_docker>>, but it now uses a specific templating syntax--Jinja2, which is
actually a lot like the Django template syntax:

[role="sourcecode"]
.deploy_tools/nginx.conf.j2
====
----
server {
    listen 80;
    server_name {{ host }};

    location /static {
        alias /home/{{ ansible_ssh_user }}/sites/{{ host }}/static;
    }

    location / {
        proxy_set_header Host {{ host }};
        proxy_pass http://unix:/tmp/{{ host }}.socket;
    }
}
----
====



And that's it!  The command to kick all these off is:

[role="small-code"]
----
ansible-playbook -i inventory.ansible provision.ansible.yaml --limit=staging --ask-become-pass
----

Lots more info in the https://docs.ansible.com/[Ansible docs].


What to Do Next
~~~~~~~~~~~~~~~



Use Vagrant to Spin Up a Local VM
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



Running tests against the staging site gives us the ultimate confidence that
things are going to work when we go live, but we can also use a VM on our
local machine.

Download Vagrant and Virtualbox, and see if you can get Vagrant to build a
dev server on your own PC, using our Ansible playbook to deploy code to it.
Rewire the FT runner to be able to test against the local VM.

Having a Vagrant config file is particularly helpful when working
in a team--it helps new developers to spin up servers that look exactly
like yours.((("", startref="ansible29")))
////




Deploying to Live
^^^^^^^^^^^^^^^^^


So, let's try using it for our live site!

[role="small-code against-server"]
[subs=""]
----
$ <strong>fab deploy:host=elspeth@superlists.ottg.eu</strong>

Done.
Disconnecting from elspeth@superlists.ottg.eu... done.
----


'Brrp brrp brpp'. You can see the script follows a slightly different path,
doing a `git clone` to bring down a brand new repo instead of a `git pull`.
It also needs to set up a new virtualenv from scratch, including a fresh
install of pip and Django. The `collectstatic` actually creates new files this
time, and the `migrate` seems to have worked too.



Git Tag the Release
~~~~~~~~~~~~~~~~~~~


((("Git", "tagging releases")))One
final bit of admin.  In order to preserve a historical marker,
we'll use Git tags to mark the state of the codebase that reflects
what's currently live on the server:

[role="skipme"]
[subs="specialcharacters,quotes"]
----
$ *git tag LIVE*
$ *export TAG=$(date +DEPLOYED-%F/%H%M)*  # this generates a timestamp
$ *echo $TAG* # should show "DEPLOYED-" and then the timestamp
$ *git tag $TAG*
$ *git push origin LIVE $TAG* # pushes the tags up
----

Now it's easy, at any time, to check what the difference is between
our current codebase and what's live on the servers.  This will come
in useful in a few chapters, when we look at database migrations. Have
a look at the tag in the history:

[subs="specialcharacters,quotes"]
----
$ *git log --graph --oneline --decorate*
[...]
----


Anyway, you now have a live website!  Tell all your friends!  Tell your mum, if
no one else is interested!  And, in the next chapter, it's back to coding
again.((("", startref="Fstage11")))



Further Reading
~~~~~~~~~~~~~~~


((("Fabric", "additional resources")))((("automated deployment", "additional resources")))There's
no such thing as the One True Way in deployment, and I'm no grizzled
expert in any case.  I've tried to set you off on a reasonably sane path, but
there's plenty of things you could do differently, and lots, lots more to learn
besides.  Here are some resources I used for inspiration:


* http://hynek.me/talks/python-deployments[Solid Python Deployments for Everybody] by Hynek Schlawack

* http://bit.ly/U6tUo5[Git-based fabric deployments are awesome] by Dan Bravender

* The deployment chapter of <<twoscoops,Two Scoops of Django>> by Dan
  Greenfeld and Audrey Roy

* http://12factor.net/[The 12-factor App] by the Heroku team



[role="pagebreak-before less_space"]
.Automated Deployments
*******************************************************************************

Fabric::
    ((("automated deployment", "best practices for")))((("Fabric", "automated deployment best practices")))Fabric
lets you run commands on servers from inside Python scripts. This
    is a great tool for automating server admin tasks.


Idempotency::
    ((("idempotency")))If
your deployment script is deploying to existing servers, you need to
    design them so that they work against a fresh installation 'and' against
    a server that's already configured.


Keep config files under source control::
    Make sure your only copy of a config file isn't on the server!  They
    are critical to your application, and should be under version control
    like anything else.

Automating provisioning::
    Ultimately, 'everything' should be automated, and that includes spinning up
    brand new servers and ensuring they have all the right software installed.
    This will involve interacting with the API of your hosting provider.

Configuration management tools::
    ((("configuration management tools")))((("Ansible")))((("Vagrant")))Fabric
is very flexible, but its logic is still based on scripting. More
    advanced tools take a more "declarative" approach, and can make your life
    even easier.  Ansible and Vagrant are two worth checking out (see
    <<appendix3>>), but there are many more (Chef, Puppet, Salt, Juju...).((("", startref="Dfarbric11")))

*******************************************************************************

